generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "postgresql"
  url          = env("POSTGRES_URL")
}

model Journey {
  id          String           @id @unique @db.Char(36)
  created_at  DateTime?        @default(now()) @db.Timestamp(0)
  updated_at  DateTime?        @default(now()) @db.Timestamp(0)
  name        String           @db.VarChar(255)
  description String?          @db.VarChar(1023)
  account_id  String
  columns     JourneyColumn[]  @relation("JourneyColumn")
  account     Account          @relation(fields: [account_id], references: [id])

  @@index([account_id])
}

model JourneyColumn {
  id         String    @id @unique @db.Char(36)
  created_at DateTime? @default(now()) @db.Timestamp(0)
  updated_at DateTime? @default(now()) @db.Timestamp(0)
  name       String    @db.VarChar(255)
  journey_id String
  position   Int
  color      String    @db.VarChar(255)
  account_id String
  journey    Journey   @relation("JourneyColumn", fields: [journey_id], references: [id], onDelete: Cascade)
  missions   Mission[] @relation("MissionColumn")
  account    Account   @relation(fields: [account_id], references: [id])

  @@index([journey_id])
}

model Mission {
  id            String           @id @unique @db.Char(36)
  created_at    DateTime?        @default(now()) @db.Timestamp(0)
  updated_at    DateTime?        @default(now()) @db.Timestamp(0)
  name          String           @db.VarChar(255)
  description   String?          @db.VarChar(1023)
  position      Int
  account_id    String
  columns       MissionColumn[]  @relation("MissionColumn")
  users         UsersOnMissions[]
  account       Account          @relation(fields: [account_id], references: [id])

  @@index([account_id])
}

model UsersOnMissions {
  user        User     @relation(fields: [user_id], references: [id])
  user_id     String
  mission     Mission  @relation(fields: [mission_id], references: [id])
  mission_id  String
  assigned_at DateTime @default(now())

  @@id([user_id, mission_id])
}

model MissionColumn {
  id         String    @id @unique @db.Char(36)
  created_at DateTime? @default(now()) @db.Timestamp(0)
  updated_at DateTime? @default(now()) @db.Timestamp(0)
  name       String    @db.VarChar(255)
  mission_id String
  account_id String
  position   Int
  color      String    @db.VarChar(255)
  mission    Mission   @relation("MissionColumn", fields: [mission_id], references: [id], onDelete: Cascade)
  tasks      Task[]    @relation("ColumnTask")
  account    Account   @relation(fields: [account_id], references: [id])

  @@index([mission_id])
}

model Task {
  id            String    @id @unique @db.Char(36)
  created_at    DateTime? @default(now()) @db.Timestamp(0)
  updated_at    DateTime? @default(now()) @db.Timestamp(0)
  name          String    @db.VarChar(255)
  description   String?   @db.VarChar(1023)
  position      Int
  points        Int
  column_id     String
  user_id       String
  account_id    String
  related_tasks String[]
  completed     Boolean   @default(false)
  column        Column    @relation("ColumnTask", fields: [column_id], references: [id], onDelete: Cascade)
  user          User      @relation("User", fields: [user_id], references: [id])
  account       User      @relation("Account", fields: [account_id], references: [id], onDelete: Cascade)
  subtasks      Subtask[] @relation("TaskSubtask")

  @@index([column_id, account_id])
}

model Subtask {
  id          String    @id @unique @db.Char(36)
  created_at  DateTime? @default(now()) @db.Timestamp(0)
  updated_at  DateTime? @default(now()) @db.Timestamp(0)
  name        String    @db.VarChar(255)
  description String?   @db.VarChar(1023)
  task_id     String
  account_id  String
  completed   Boolean   @default(false)
  task        Task      @relation("TaskSubtask", fields: [task_id], references: [id], onDelete: Cascade)
  account     User      @relation("Account", fields: [account_id], references: [id], onDelete: Cascade)

  @@index([task_id, account_id])
}

model Milestone {
  id          String    @id @unique @db.Char(36)
  created_at  DateTime? @default(now()) @db.Timestamp(0)
  updated_at  DateTime? @default(now()) @db.Timestamp(0)
  name        String    @db.VarChar(255)
  description String?   @db.VarChar(1023)
  prize_id    String
  completed   Boolean
  account_id  String
  prize       Prize     @relation(fields: [prize_id], references: [id])
  account     Account   @relation(fields: [account_id], references: [id])

  @@index([account_id])
}

model Prizes {
  id          String    @id @unique @db.Char(36)
  created_at  DateTime? @default(now()) @db.Timestamp(0)
  updated_at  DateTime? @default(now()) @db.Timestamp(0)
  name        String    @db.VarChar(255)
  description String?   @db.VarChar(1023)
  points      Int?
  account_id  String
  account     Account   @relation(fields: [account_id], references: [id])

  @@index([account_id])
}

model Account {
  id                String    @id @unique @db.Char(36)
  name              String
  users             Users[]   @relation("User")  
}

model Session {
  id            String   @id @default(cuid())
  session_token String   @unique
  user_id       String
  expires       DateTime
  user          User     @relation(fields: [user_id], references: [id])

  @@index([user_id])
}

model User {
  id            String    @id @unique @db.Char(36)
  email         String?   @unique
  emailVerified DateTime?
  avatar        String?
  account_id    String
  groups        UsersOnGroups[]
  sessions      Session[]
  missions      UsersOnMissions[]
  account       Account   @relation("Account", fields: [account_id], references: [id], onDelete: Cascade)
}

model Group {
  id            String            @id @unique @db.Char(36)
  name          String            @db.VarChar(255)
  description   String?           @db.VarChar(1023)
  users         UsersOnGroups[]
}

model UsersOnGroups {
  user        User     @relation(fields: [user_id], references: [id])
  user_id     String
  group       Group    @relation(fields: [group_id], references: [id])
  group_id    String
  assigned_at DateTime @default(now())

  @@id([user_id, group_id])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}